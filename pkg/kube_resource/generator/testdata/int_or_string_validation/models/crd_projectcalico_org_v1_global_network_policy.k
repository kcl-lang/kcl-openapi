"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema GlobalNetworkPolicy:
    """
    crd projectcalico org v1 global network policy

    Attributes
    ----------
    action : str, default is Undefined, optional
        action
    apiVersion : str, default is "crd.projectcalico.org/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    capacity : {str:int | str}, default is Undefined, optional
        A description of the virtual volume's resources and capacity
    kind : str, default is "GlobalNetworkPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    destination : CrdProjectcalicoOrgV1GlobalNetworkPolicyDestination, default is Undefined, optional
        destination
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    """


    action?: str

    apiVersion: "crd.projectcalico.org/v1" = "crd.projectcalico.org/v1"

    capacity?: {str:int | str}

    kind: "GlobalNetworkPolicy" = "GlobalNetworkPolicy"

    destination?: CrdProjectcalicoOrgV1GlobalNetworkPolicyDestination

    metadata?: v1.ObjectMeta


    check:
        all _, capacity in capacity {_regex_match(str(capacity), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if capacity } if capacity


schema CrdProjectcalicoOrgV1GlobalNetworkPolicyDestination:
    """
    Destination contains the match criteria that apply to destination entity.

    Attributes
    ----------
    namespaceSelector : str, default is Undefined, optional
        NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. 
         For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. 
         For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. 
         For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.
    nets : [str], default is Undefined, optional
        Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.
    notNets : [str], default is Undefined, optional
        NotNets is the negated version of the Nets field.
    notPorts : [int | str], default is Undefined, optional
        NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    notSelector : str, default is Undefined, optional
        NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.
    ports : [int | str], default is Undefined, optional
        Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. 
         Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    selector : str, default is Undefined, optional
        Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. 
         Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: 
         	Selector = "!has(my_label)" matches packets that are from other Calico-controlled 	endpoints that do not have the label "my_label". 
         	NotSelector = "has(my_label)" matches packets that are not from Calico-controlled 	endpoints that do have the label "my_label". 
         The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.
    serviceAccounts : CrdProjectcalicoOrgV1GlobalNetworkPolicyDestinationServiceAccounts, default is Undefined, optional
        service accounts
    services : CrdProjectcalicoOrgV1GlobalNetworkPolicyDestinationServices, default is Undefined, optional
        services
    """


    namespaceSelector?: str

    nets?: [str]

    notNets?: [str]

    notPorts?: [int | str]

    notSelector?: str

    ports?: [int | str]

    selector?: str

    serviceAccounts?: CrdProjectcalicoOrgV1GlobalNetworkPolicyDestinationServiceAccounts

    services?: CrdProjectcalicoOrgV1GlobalNetworkPolicyDestinationServices


    check:
        all notPorts in notPorts {_regex_match(str(notPorts), r"^.*") if notPorts } if notPorts
        all ports in ports {_regex_match(str(ports), r"^.*") if ports } if ports


schema CrdProjectcalicoOrgV1GlobalNetworkPolicyDestinationServiceAccounts:
    """
    ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.
    selector : str, default is Undefined, optional
        Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.
    """


    names?: [str]

    selector?: str


schema CrdProjectcalicoOrgV1GlobalNetworkPolicyDestinationServices:
    """
    Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. 
     Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. 
     Ports and NotPorts can only be specified with Services on ingress rules.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name specifies the name of a Kubernetes Service to match.
    namespace : str, default is Undefined, optional
        Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.
    """


    name?: str

    namespace?: str


