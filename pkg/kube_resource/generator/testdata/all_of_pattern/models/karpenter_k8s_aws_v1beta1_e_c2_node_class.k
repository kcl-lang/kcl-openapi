"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema EC2NodeClass:
    """
    EC2NodeClass is the Schema for the EC2NodeClass API

    Attributes
    ----------
    apiVersion : str, default is "karpenter.k8s.aws/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "EC2NodeClass", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KarpenterK8sAwsV1beta1EC2NodeClassSpec, default is Undefined, optional
        spec
    status : KarpenterK8sAwsV1beta1EC2NodeClassStatus, default is Undefined, optional
        status
    """


    apiVersion: "karpenter.k8s.aws/v1beta1" = "karpenter.k8s.aws/v1beta1"

    kind: "EC2NodeClass" = "EC2NodeClass"

    metadata?: v1.ObjectMeta

    spec?: KarpenterK8sAwsV1beta1EC2NodeClassSpec

    status?: KarpenterK8sAwsV1beta1EC2NodeClassStatus


schema KarpenterK8sAwsV1beta1EC2NodeClassSpec:
    """
    EC2NodeClassSpec is the top level specification for the AWS Karpenter Provider. This will contain configuration necessary to launch instances in AWS.

    Attributes
    ----------
    amiFamily : str, default is Undefined, required
        AMIFamily is the AMI family that instances use.
    amiSelectorTerms : [KarpenterK8sAwsV1beta1EC2NodeClassSpecAmiSelectorTermsItems0], default is Undefined, optional
        AMISelectorTerms is a list of or ami selector terms. The terms are ORed.
    blockDeviceMappings : [KarpenterK8sAwsV1beta1EC2NodeClassSpecBlockDeviceMappingsItems0], default is Undefined, optional
        BlockDeviceMappings to be applied to provisioned nodes.
    context : str, default is Undefined, optional
        Context is a Reserved field in EC2 APIs https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet.html
    detailedMonitoring : bool, default is Undefined, optional
        DetailedMonitoring controls if detailed monitoring is enabled for instances that are launched
    role : str, default is Undefined, required
        Role is the AWS identity that nodes use. This field is immutable. Marking this field as immutable avoids concerns around terminating managed instance profiles from running instances. This field may be made mutable in the future, assuming the correct garbage collection and drift handling is implemented for the old instance profiles on an update.
    securityGroupSelectorTerms : [KarpenterK8sAwsV1beta1EC2NodeClassSpecSecurityGroupSelectorTermsItems0], default is Undefined, required
        SecurityGroupSelectorTerms is a list of or security group selector terms. The terms are ORed.
    subnetSelectorTerms : [KarpenterK8sAwsV1beta1EC2NodeClassSpecSubnetSelectorTermsItems0], default is Undefined, required
        SubnetSelectorTerms is a list of or subnet selector terms. The terms are ORed.
    tags : {str:str}, default is Undefined, optional
        Tags to be applied on ec2 resources like instances and launch templates.
    userData : str, default is Undefined, optional
        UserData to be applied to the provisioned nodes. It must be in the appropriate format based on the AMIFamily in use. Karpenter will merge certain fields into this UserData to ensure nodes are being provisioned with the correct configuration.
    metadataOptions : KarpenterK8sAwsV1beta1EC2NodeClassSpecMetadataOptions, default is Undefined, optional
        metadata options
    """


    amiFamily: "AL2" | "Bottlerocket" | "Ubuntu" | "Custom" | "Windows2019" | "Windows2022"

    amiSelectorTerms?: [KarpenterK8sAwsV1beta1EC2NodeClassSpecAmiSelectorTermsItems0]

    blockDeviceMappings?: [KarpenterK8sAwsV1beta1EC2NodeClassSpecBlockDeviceMappingsItems0]

    context?: str

    detailedMonitoring?: bool

    role: str

    securityGroupSelectorTerms: [KarpenterK8sAwsV1beta1EC2NodeClassSpecSecurityGroupSelectorTermsItems0]

    subnetSelectorTerms: [KarpenterK8sAwsV1beta1EC2NodeClassSpecSubnetSelectorTermsItems0]

    tags?: {str:str}

    userData?: str

    metadataOptions?: KarpenterK8sAwsV1beta1EC2NodeClassSpecMetadataOptions


    check:
        len(amiSelectorTerms) <= 30
        len(blockDeviceMappings) <= 50
        len(securityGroupSelectorTerms) <= 30
        len(subnetSelectorTerms) <= 30


schema KarpenterK8sAwsV1beta1EC2NodeClassSpecAmiSelectorTermsItems0:
    """
    AMISelectorTerm defines selection logic for an ami used by Karpenter to launch nodes. If multiple fields are used for selection, the requirements are ANDed.

    Attributes
    ----------
    id : str, default is Undefined, optional
        ID is the ami id in EC2
    name : str, default is Undefined, optional
        Name is the ami name in EC2. This value is the name field, which is different from the name tag.
    owner : str, default is Undefined, optional
        Owner is the owner for the ami. You can specify a combination of AWS account IDs, "self", "amazon", and "aws-marketplace"
    tags : {str:str}, default is Undefined, optional
        Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.
    """


    id?: str

    name?: str

    owner?: str

    tags?: {str:str}


    check:
        regex.match(str(id), r"ami-[0-9a-z]+") if id


schema KarpenterK8sAwsV1beta1EC2NodeClassSpecBlockDeviceMappingsItems0:
    """
    karpenter k8s aws v1beta1 e c2 node class spec block device mappings items0

    Attributes
    ----------
    deviceName : str, default is Undefined, optional
        The device name (for example, /dev/sdh or xvdh).
    ebs : KarpenterK8sAwsV1beta1EC2NodeClassSpecBlockDeviceMappingsItems0Ebs, default is Undefined, optional
        ebs
    rootVolume : bool, default is Undefined, optional
        RootVolume is a flag indicating if this device is mounted as kubelet root dir. You can configure at most one root volume in BlockDeviceMappings.
    """


    deviceName?: str

    ebs?: KarpenterK8sAwsV1beta1EC2NodeClassSpecBlockDeviceMappingsItems0Ebs

    rootVolume?: bool


schema KarpenterK8sAwsV1beta1EC2NodeClassSpecBlockDeviceMappingsItems0Ebs:
    """
    EBS contains parameters used to automatically set up EBS volumes when an instance is launched.

    Attributes
    ----------
    deleteOnTermination : bool, default is Undefined, optional
        DeleteOnTermination indicates whether the EBS volume is deleted on instance termination.
    encrypted : bool, default is Undefined, optional
        Encrypted indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
    iops : int, default is Undefined, optional
        IOPS is the number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. 
         The following are the supported values for each volume type: 
         * gp3: 3,000-16,000 IOPS 
         * io1: 100-64,000 IOPS 
         * io2: 100-64,000 IOPS 
         For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). Other instance families guarantee performance up to 32,000 IOPS. 
         This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.
    kmsKeyID : str, default is Undefined, optional
        KMSKeyID (ARN) of the symmetric Key Management Service (KMS) CMK used for encryption.
    snapshotID : str, default is Undefined, optional
        SnapshotID is the ID of an EBS snapshot
    throughput : int, default is Undefined, optional
        Throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.
    volumeSize : int | str, default is Undefined, optional
        VolumeSize in `Gi`, `G`, `Ti`, or `T`. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type: 
         * gp2 and gp3: 1-16,384 
         * io1 and io2: 4-16,384 
         * st1 and sc1: 125-16,384 
         * standard: 1-1,024
    volumeType : str, default is Undefined, optional
        VolumeType of the block device. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the Amazon Elastic Compute Cloud User Guide.
    """


    deleteOnTermination?: bool

    encrypted?: bool

    iops?: int

    kmsKeyID?: str

    snapshotID?: str

    throughput?: int

    volumeSize?: int | str

    volumeType?: "standard" | "io1" | "io2" | "gp2" | "sc1" | "st1" | "gp3"


    check:
        regex.match(str(volumeSize), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if volumeSize
        regex.match(str(volumeSize), r"^((?:[1-9][0-9]{0,3}|[1-4][0-9]{4}|[5][0-8][0-9]{3}|59000)Gi|(?:[1-9][0-9]{0,3}|[1-5][0-9]{4}|[6][0-3][0-9]{3}|64000)G|([1-9]||[1-5][0-7]|58)Ti|([1-9]||[1-5][0-9]|6[0-3]|64)T)$") if volumeSize


schema KarpenterK8sAwsV1beta1EC2NodeClassSpecMetadataOptions:
    """
    MetadataOptions for the generated launch template of provisioned nodes. 
     This specifies the exposure of the Instance Metadata Service to provisioned EC2 nodes. For more information, see Instance Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the Amazon Elastic Compute Cloud User Guide. 
     Refer to recommended, security best practices (https://aws.github.io/aws-eks-best-practices/security/docs/iam/#restrict-access-to-the-instance-profile-assigned-to-the-worker-node) for limiting exposure of Instance Metadata and User Data to pods. If omitted, defaults to httpEndpoint enabled, with httpProtocolIPv6 disabled, with httpPutResponseLimit of 2, and with httpTokens required.

    Attributes
    ----------
    httpEndpoint : str, default is "enabled", optional
        HTTPEndpoint enables or disables the HTTP metadata endpoint on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is "enabled". 
         If you specify a value of "disabled", instance metadata will not be accessible on the node.
    httpProtocolIPv6 : str, default is "disabled", optional
        HTTPProtocolIPv6 enables or disables the IPv6 endpoint for the instance metadata service on provisioned nodes. If metadata options is non-nil, but this parameter is not specified, the default state is "disabled".
    httpPutResponseHopLimit : int, default is 2, optional
        HTTPPutResponseHopLimit is the desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Possible values are integers from 1 to 64. If metadata options is non-nil, but this parameter is not specified, the default value is 2.
    httpTokens : str, default is "required", optional
        HTTPTokens determines the state of token usage for instance metadata requests. If metadata options is non-nil, but this parameter is not specified, the default state is "required". 
         If the state is optional, one can choose to retrieve instance metadata with or without a signed token header on the request. If one retrieves the IAM role credentials without a token, the version 1.0 role credentials are returned. If one retrieves the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. 
         If the state is "required", one must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
    """


    httpEndpoint?: "enabled" | "disabled" = "enabled"

    httpProtocolIPv6?: "enabled" | "disabled" = "disabled"

    httpPutResponseHopLimit?: int = 2

    httpTokens?: "required" | "optional" = "required"


    check:
        httpPutResponseHopLimit <= 64
        httpPutResponseHopLimit >= 1


schema KarpenterK8sAwsV1beta1EC2NodeClassSpecSecurityGroupSelectorTermsItems0:
    """
    SecurityGroupSelectorTerm defines selection logic for a security group used by Karpenter to launch nodes. If multiple fields are used for selection, the requirements are ANDed.

    Attributes
    ----------
    id : str, default is Undefined, optional
        ID is the security group id in EC2
    name : str, default is Undefined, optional
        Name is the security group name in EC2. This value is the name field, which is different from the name tag.
    tags : {str:str}, default is Undefined, optional
        Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.
    """


    id?: str

    name?: str

    tags?: {str:str}


    check:
        regex.match(str(id), r"sg-[0-9a-z]+") if id


schema KarpenterK8sAwsV1beta1EC2NodeClassSpecSubnetSelectorTermsItems0:
    """
    SubnetSelectorTerm defines selection logic for a subnet used by Karpenter to launch nodes. If multiple fields are used for selection, the requirements are ANDed.

    Attributes
    ----------
    id : str, default is Undefined, optional
        ID is the subnet id in EC2
    tags : {str:str}, default is Undefined, optional
        Tags is a map of key/value tags used to select subnets Specifying '*' for a value selects all values for a given tag key.
    """


    id?: str

    tags?: {str:str}


    check:
        regex.match(str(id), r"subnet-[0-9a-z]+") if id


schema KarpenterK8sAwsV1beta1EC2NodeClassStatus:
    """
    EC2NodeClassStatus contains the resolved state of the EC2NodeClass

    Attributes
    ----------
    amis : [KarpenterK8sAwsV1beta1EC2NodeClassStatusAmisItems0], default is Undefined, optional
        AMI contains the current AMI values that are available to the cluster under the AMI selectors.
    instanceProfile : str, default is Undefined, optional
        InstanceProfile contains the resolved instance profile for the role
    securityGroups : [KarpenterK8sAwsV1beta1EC2NodeClassStatusSecurityGroupsItems0], default is Undefined, optional
        SecurityGroups contains the current Security Groups values that are available to the cluster under the SecurityGroups selectors.
    subnets : [KarpenterK8sAwsV1beta1EC2NodeClassStatusSubnetsItems0], default is Undefined, optional
        Subnets contains the current Subnet values that are available to the cluster under the subnet selectors.
    """


    amis?: [KarpenterK8sAwsV1beta1EC2NodeClassStatusAmisItems0]

    instanceProfile?: str

    securityGroups?: [KarpenterK8sAwsV1beta1EC2NodeClassStatusSecurityGroupsItems0]

    subnets?: [KarpenterK8sAwsV1beta1EC2NodeClassStatusSubnetsItems0]


schema KarpenterK8sAwsV1beta1EC2NodeClassStatusAmisItems0:
    """
    AMI contains resolved AMI selector values utilized for node launch

    Attributes
    ----------
    id : str, default is Undefined, required
        ID of the AMI
    name : str, default is Undefined, optional
        Name of the AMI
    requirements : [KarpenterK8sAwsV1beta1EC2NodeClassStatusAmisItems0RequirementsItems0], default is Undefined, required
        Requirements of the AMI to be utilized on an instance type
    """


    id: str

    name?: str

    requirements: [KarpenterK8sAwsV1beta1EC2NodeClassStatusAmisItems0RequirementsItems0]


schema KarpenterK8sAwsV1beta1EC2NodeClassStatusAmisItems0RequirementsItems0:
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema KarpenterK8sAwsV1beta1EC2NodeClassStatusSecurityGroupsItems0:
    """
    SecurityGroup contains resolved SecurityGroup selector values utilized for node launch

    Attributes
    ----------
    id : str, default is Undefined, required
        ID of the security group
    name : str, default is Undefined, optional
        Name of the security group
    """


    id: str

    name?: str


schema KarpenterK8sAwsV1beta1EC2NodeClassStatusSubnetsItems0:
    """
    Subnet contains resolved Subnet selector values utilized for node launch

    Attributes
    ----------
    id : str, default is Undefined, required
        ID of the subnet
    zone : str, default is Undefined, required
        The associated availability zone
    """


    id: str

    zone: str


